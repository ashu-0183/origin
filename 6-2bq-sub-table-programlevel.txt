CREATE OR REPLACE TABLE `your_project.your_dataset.jira_common_table` AS
WITH JiraData AS (
    SELECT 
        key,
        issue_type,
        status,
        COALESCE(story_points, 0) AS story_points,
        ARRAY_TO_STRING(components, ', ') AS squad,  -- Flatten components for filtering
        created,
        start_date,
        target_end_date,
        epic_link,
        fix_version  -- Keep fix_version as an array for now
    FROM `your_project.your_dataset.jira_data`
    WHERE issue_type IN ('Epic', 'Feature')  -- Filter only Epics & Features
),
FlattenedJira AS (
    SELECT 
        key,
        issue_type,
        status,
        story_points,
        squad,
        created,
        start_date,
        target_end_date,
        epic_link,
        fv AS pi  -- Flatten fix_version array
    FROM JiraData, UNNEST(fix_version) AS fv
),
EpicMetrics AS (
    SELECT 
        pi,
        squad,
        COUNT(DISTINCT key) AS total_epics,
        SUM(CASE WHEN status = 'Done' THEN 1 ELSE 0 END) AS completed_epics
    FROM FlattenedJira
    WHERE issue_type = 'Epic'
    GROUP BY pi, squad
),
FeatureMetrics AS (
    SELECT 
        pi,
        squad,
        COUNT(DISTINCT key) AS total_features,
        SUM(CASE WHEN status = 'Done' THEN 1 ELSE 0 END) AS completed_features
    FROM FlattenedJira
    WHERE issue_type = 'Feature'
    GROUP BY pi, squad
)
SELECT 
    fj.key,
    fj.issue_type,
    fj.status,
    fj.story_points,
    fj.squad,
    fj.pi,
    fj.created,
    fj.start_date,
    fj.target_end_date,
    em.total_epics,
    em.completed_epics,
    fm.total_features,
    fm.completed_features
FROM FlattenedJira fj
LEFT JOIN EpicMetrics em ON fj.pi = em.pi AND fj.squad = em.squad
LEFT JOIN FeatureMetrics fm ON fj.pi = fm.pi AND fj.squad = fm.squad;
