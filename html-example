<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kubernetes API Dashboard</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f8f8;
            color: #333;
        }

        header {
            background-color: #2c3e50;
            color: #ecf0f1;
            text-align: center;
            padding: 1rem;
            font-size: 1.5rem;
        }

        main {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .domain-selector {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }

        .domain-button {
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            background-color: #3498db;
            color: #fff;
            border: none;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .domain-button:hover {
            background-color: #2980b9;
        }

        .environment-selector {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }

        .environment-button {
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            background-color: #27ae60;
            color: #fff;
            border: none;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .environment-button:hover {
            background-color: #219a52;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #ecf0f1;
        }
    </style>
</head>
<body>
    <header>
        <h1>Kubernetes API Dashboard</h1>
    </header>

    <main>
        <div class="domain-selector">
            <button class="domain-button" onclick="selectDomain('domain-1')">Domain 1</button>
            <button class="domain-button" onclick="selectDomain('domain-2')">Domain 2</button>
            <button class="domain-button" onclick="selectDomain('domain-3')">Domain 3</button>
        </div>

        <div class="environment-selector">
            <button class="environment-button" onclick="selectEnvironment('sit')">SIT</button>
            <button class="environment-button" onclick="selectEnvironment('uat')">UAT</button>
            <button class="environment-button" onclick="selectEnvironment('ppd')">PPD</button>
        </div>

        <table id="kube-table">
            <thead>
                <tr>
                    <th>Namespace</th>
                    <th>Name</th>
                    <th>Replicas</th>
                </tr>
            </thead>
            <tbody id="kube-items"></tbody>
        </table>
    </main>

    <script>
        let selectedDomain = '';
        let selectedEnvironment = '';

        function selectDomain(domain) {
            selectedDomain = domain;
            selectedEnvironment = ''; // Reset environment when domain changes
            fetchKubeDetails();
        }

        function selectEnvironment(environment) {
            selectedEnvironment = environment;
            fetchKubeDetails();
        }

        function fetchKubeDetails() {
            // Fetch data from your Spring Boot API based on selected domain and environment
            const apiUrl = `http://localhost:${getPort(selectedDomain)}/api/kube-details?domain=${selectedDomain}&environment=${selectedEnvironment}`;
            
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    // Process and display Kubernetes details
                    const kubeItems = document.getElementById("kube-items");
                    kubeItems.innerHTML = ""; // Clear previous data

                    data.kubeDetails.forEach(item => {
                        const row = document.createElement("tr");
                        const namespaceCell = document.createElement("td");
                        namespaceCell.textContent = item.namespace;
                        const nameCell = document.createElement("td");
                        nameCell.textContent = item.name;
                        const replicasCell = document.createElement("td");
                        replicasCell.textContent = item.replicas;
                        row.appendChild(namespaceCell);
                        row.appendChild(nameCell);
                        row.appendChild(replicasCell);
                        kubeItems.appendChild(row);
                    });
                })
                .catch(error => console.error("Error fetching Kubernetes details:", error));
        }

        function getPort(domain) {
            // Map domains to corresponding ports
            const domainPorts = {
                'domain-1': 8080,
                'domain-2': 8090,
                'domain-3': 8091
            };

            return domainPorts[domain] || 8080; // Default to 8080 if domain not found
        }

        // Initial fetch when the page loads
        fetchKubeDetails();
    </script>
</body>
</html>
