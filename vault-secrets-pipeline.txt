pipeline {
    agent any

    environment {
        VAULT_ADDR = 'https://vault.example.com'  // Replace with your Vault server address
        VAULT_SERVICE_ACCOUNT = credentials('VAULT_SERVICE_ACCOUNT')  // Jenkins credentials for service account
        VAULT_PASSWORD = credentials('VAULT_PASSWORD')  // Jenkins credentials for password
    }

    parameters {
        string(name: 'VAULT_NAMESPACE', defaultValue: '', description: 'Vault Namespace')
        string(name: 'KUBERNETES_NAMESPACE', defaultValue: '', description: 'Kubernetes Namespace')
        string(name: 'APPLICATION_NAME', defaultValue: '', description: 'Application Name')
    }

    stages {
        stage('Validate Input') {
            steps {
                script {
                    if (!params.VAULT_NAMESPACE || !params.KUBERNETES_NAMESPACE || !params.APPLICATION_NAME) {
                        error "All parameters must be provided"
                    }
                }
            }
        }

        stage('Authenticate to Vault') {
            steps {
                script {
                    // Authenticate to Vault using the service account and password stored in Jenkins credentials
                    wrap([$class: 'MaskPasswordsBuildWrapper']) {
                        def authResponse = sh(
                            script: """
                            curl -s --request POST --data '{"password": "${env.VAULT_PASSWORD}"}' $VAULT_ADDR/v1/auth/userpass/login/${env.VAULT_SERVICE_ACCOUNT}
                            """,
                            returnStdout: true
                        ).trim()

                        def jsonResponse = readJSON text: authResponse
                        if (!jsonResponse.auth || !jsonResponse.auth.client_token) {
                            error "Vault authentication failed. Please check the service account and password."
                        }

                        // Store the Vault token in an environment variable
                        env.VAULT_TOKEN = jsonResponse.auth.client_token
                    }
                }
            }
        }

        stage('Create Vault Secrets') {
            steps {
                script {
                    // Retrieve secret data from Jenkins credentials (e.g., stored as a JSON string)
                    def secretData = credentials('VAULT_SECRET_DATA')  // Stored in Jenkins as a secure secret text
                    def parsedSecretData = readJSON text: secretData

                    // Vault path for storing secrets
                    def vaultPath = "${params.VAULT_NAMESPACE}/data/${params.KUBERNETES_NAMESPACE}/${params.APPLICATION_NAME}"

                    // Securely write each secret key and value to Vault
                    wrap([$class: 'MaskPasswordsBuildWrapper']) {
                        parsedSecretData.each { key, value ->
                            sh """
                            curl -s --header "X-Vault-Token: $VAULT_TOKEN" --request POST --data '{"data": {"${key}": "${value}"}}' $VAULT_ADDR/v1/${vaultPath}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up any sensitive data
            cleanWs()
        }
    }
}
